@implements IDialogHost
@inject IDialogService DialogService

<CascadingValue Value="this">
    @if (_showDialog || _showDialog)
    {
        <div class="dialog-host">
            @if (_dialogType != null && _showDialog)
            {
                <div class="dialog-container" @onclick="OnDismiss">
                    <div class="dialog-content" @onclick:stopPropagation="true">
                        @if (!string.IsNullOrEmpty(_dialogHeader))
                        {
                            <div class="header-section">
                                <h3 class="dialog-header">@_dialogHeader</h3>
                                @if (_showClose)
                                {
                                    <IconButton Icon="@Icons.Feather.X" OnClick="()=>CloseDialog()"/>
                                }
                            </div>
                        }
                        <DynamicComponent Type="_dialogType" Parameters="_dialogParameters" />
                    </div>
                </div>
            }

            @if (_showLoading)
            {
                <div class="loading-container">
                    <LoadingSpinner />
                    <div class="loading-message">@_loadingMessage</div>
                </div>
            }
        </div>
    }
</CascadingValue>
@code {
    private bool _showDialog;
    private bool _showLoading;
    private bool _showClose;
    private string? _loadingMessage;
    private Type? _dialogType;
    private bool _allowDismiss;
    private string? _dialogHeader;

    private Dictionary<string, object>? _dialogParameters;

    private TaskCompletionSource<DialogResult>? _tcsDialog;

    protected override void OnInitialized()
    {
        DialogService.SetHost(this);
    }

    public async Task<DialogResult> ShowDialog(Type dialogType, string? dialogHeader, bool allowDismiss, bool showClose, Dictionary<string, object>? parameters)
    {
        _showClose = showClose;
        _allowDismiss = allowDismiss;
        _dialogHeader = dialogHeader;
        _tcsDialog = new();
        _dialogType = dialogType;
        _dialogParameters = parameters;
        _showDialog = true;
        await InvokeAsync(StateHasChanged);

        DialogResult obj = await _tcsDialog.Task;

        _showDialog = false;
        _dialogType = null;
        _dialogParameters = null;
        await InvokeAsync(StateHasChanged);
        return obj;
    }

    private void OnDismiss()
    {
        if (_allowDismiss)
        {
            CloseDialog();
        }
    }

    public void CloseDialog(bool? isSuccess = null, object? data = null)
    {
        DialogResult result = new()
        {
            Data = data,
            Success = isSuccess
        };

        _tcsDialog?.SetResult(result);
    }
}