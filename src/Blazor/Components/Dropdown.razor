@typeparam T
@inherits InputBase<T>
@implements IDropdown

<div class="@GetClass()" @onclick="Clicked" @onclick:stopPropagation=!Disabled>
    <div class="content">
        @if (Value != null)
        {
            @if (ItemTemplate == null)
            {
                <TextBlock>@Value.GetDisplayMember(DisplayMemberFunc, DisplayMemberPath)</TextBlock>
            }
            else
            {
                @ItemTemplate(Value)
            }
        }
        else if (Placeholder != null)
        {
            <TextBlock Class="placeholder">@Placeholder</TextBlock>
        }
    </div>
    <div class="items">
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <div class="item" @onclick="()=>ItemClicked(item)">
                    @if (ItemTemplate == null)
                    {
                        <TextBlock>@item.GetDisplayMember(DisplayMemberFunc, DisplayMemberPath)</TextBlock>
                    }
                    else
                    {
                        @ItemTemplate(item)
                    }
                </div>
            }
        }
    </div>
    <span class="header-label">@Header</span>

    @if (ValidationResult.Message != null)
    {
        <span class="@GetValidationClass()">@ValidationResult.Message</span>
    }
</div>
@code {
    [Parameter]
    public IEnumerable<T>? Items { get; set; }

    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter]
    public string? DisplayMemberPath { get; set; }

    [Parameter]
    public Func<T?, string>? DisplayMemberFunc { get; set; }

    [CascadingParameter]
    public IDropdownLayout? Layout { get; set; }

    [Parameter]
    public string? OpenClass { get; set; }

    [Parameter]
    public string? ClosedClass { get; set; }

    private bool _isOpen;

    protected override void OnInitialized()
    {
        if (Layout != null)
        {
            Layout.Clicked += OnLayoutClicked;
            Layout.DropdownClicked += OnDropdownClicked;
        }
    }

    private void OnLayoutClicked()
    {
        SetState(false);
    }

    private void OnDropdownClicked(IDropdown dropdown)
    {
        if (dropdown != this)
        {
            SetState(false);
        }
    }

    private async Task ItemClicked(T item)
    {
        ChangeEventArgs args = new() { Value = item };
        await OnChange(args);
    }

    private void Clicked()
    {
        if (!Disabled)
        {
            SetState(!_isOpen);
            Layout?.OnDropdownClicked(this);
        }
    }

    protected void SetState(bool state)
    {
        InvokeAsync(() =>
       {
           _isOpen = state;
           StateHasChanged();
       });
    }

    protected override void BuildInputClass(List<string> classList)
    {
        base.BuildInputClass(classList);

        if (_isOpen)
        {
            classList.Add(OpenClass ?? "open");
        }
        else
        {
            classList.Add(ClosedClass ?? "closed");
        }
        classList.Add("dropdown");
    }

    protected override T? GetValue(object? value)
    {
        return (T?)value;
    }
}
